---
# yamllint disable rule:line-length
name: repo

on:
  push:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      artifact_id: ${{ steps.upload-artifact.outputs.artifact-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Setup reprepro debian repository
        uses: myci-actions/add-deb-repo@latest
        with:
          repo: deb https://packaging.gitlab.io/reprepro-multiple-versions bookworm main
          repo-name: reprepro-multiple-versions
          keys-asc: https://packaging.gitlab.io/reprepro-multiple-versions/gpg.key
          update: true
      - name: Install toolchain
        uses: awalsh128/cache-apt-pkgs-action@11
        with:
          packages: reprepro curl
      - name: Fetch package
        run: >-
          curl -sfLO https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_linux_arm64.deb
          curl -sfLO https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_linux_amd64.deb
      - name: Create apt repo
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          CODENAME: jammy
        run: >-
          set -euo pipefail
          codename="${CODENAME}"
          component="${COMPONENT:-main}"
          reprepro_basedir="reprepro -b ./.repo"
          reprepro="${reprepro_basedir} -C ${component}"
          gpg --import <<<"${SIGNING_KEY}" 2>&1 | tee /tmp/gpg.log
          fingerprint="$(grep -o "key [0-9A-Z]*:" /tmp/gpg.log | grep -o "[0-9A-Z]*" | tail -n1)"
          test -f ./.repo/gpg.key || gpg --export --armor "${fingerprint}" >./.repo/gpg.key
          sed -i 's,##SIGNING_KEY_ID##,'"${fingerprint}"',' ./.repo/conf/distributions
          mapfile -t packages < <(find . -type f -name "*.deb")
          for package in "${packages[@]}"; do
              package_name="$(dpkg -f "${package}" Package)"
              package_version="$(dpkg -f "${package}" Version)"
              package_arch="$(dpkg -f "${package}" Architecture)"
              printf "\e[1;36m[%s %s] Checking for package %s %s (%s) in current repo cache ...\e[0m " "${codename}" "${component}" "${package_name}" "${package_version}" "${package_arch}"
              case "${package_arch}" in
              "all")
                  filter='Package (=='"${package_name}"'), $Version (=='"${package_version}"')'
                  ;;
              *)
                  filter='Package (=='"${package_name}"'), $Version (=='"${package_version}"'), $Architecture (=='"${package_arch}"')'
                  ;;
              esac
              if [ -d ./.repo/db" ]; then
                  if $reprepro listfilter "${codename}" "${filter}" | grep -q '.*'; then
                      printf "\e[0;32mOK\e[0m\n"
                      continue
                  fi
              fi
              if grep -q "${package##*/}" <<<"${includedebs[@]}"; then
                  printf "\e[0;32mOK\e[0m\n"
                  continue
              fi
              printf "\e\033[0;38;5;166mAdding\e[0m\n"
              includedebs+=("${package}")
          done
          if [ -n "${includedebs}" ]; then
              $reprepro \
                  -vvv \
                  includedeb \
                  "${codename}" \
                  "${includedebs[@]}"
          fi
          if ! $reprepro_basedir -v checkpool fast |& tee /tmp/missing; then
              printf "\e[0;36mStarting repo cache cleanup ...\e[0m\n"
              mapfile -t missingfiles < <(grep "Missing file" /tmp/log | grep --color=never -o "/.*\.deb")
              for missingfile in "${missingfiles[@]}"; do
                  missingfile="${missingfile##*/}"
                  name="$(cut -d'_' -f 1 <<<"${missingfile}")"
                  version="$(cut -d'_' -f 2 <<<"${missingfile}")"
                  echo "cleanup missing file ${missingfile} from repo"
                  $reprepro \
                      -v \
                      remove \
                      "${codename}" \
                      "${name}=${version}"
              done
          fi
          mkdir -p ./repo
          cp -rv ./.repo/gpg.key ./.repo/dists ./.repo/pool ./repo/
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./repo
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
